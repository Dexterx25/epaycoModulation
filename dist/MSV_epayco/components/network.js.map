{"version":3,"file":"network.js","sourceRoot":"","sources":["../../../src/MSV_epayco/components/network.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router, Request, Response, NextFunction} from \"express\";\nimport controller from \"./index\";\nconst {ServerResponse, ConsoleResponse} = require('../../../utils/responses/index')\nimport secure from './secure'\nimport {config} from '../../configurations/index'\n\nconst router: Router = Router()\n\nrouter.post('/create', upsert)\nrouter.get('/', secure('get'), get)\nrouter.get('/list',  secure('list'), list)\nrouter.put('/update',  secure('update'),  update)\n// router.get('/filter', secure('filter'), filter)\nlet procedence : string = \"EPAYCO NETWORK\";\n\nasync function upsert(req: Request, res: Response, next: NextFunction ) {\nconst datas: object = {\n   type:'epayco_request',\n   datas:req.body,\n   files:req.files\n }\n await controller.insert(datas)\n     .then((respon:any)=>{\n        ConsoleResponse.success(procedence, respon)\n        ServerResponse.success(req, res, respon, 200)\n     })\n     .catch(next)\n}\n\nasync function get(req:Request, res:Response, next:NextFunction){\n   const {filter} :any = req.query\n   const data = {\n     filter,\n     token:req.headers.authorization\n   }\n   console.log('datass-->', data)\n  \n   controller.get(data).then((dataUser:any)=>{\n       ConsoleResponse.success(procedence, dataUser)\n       ServerResponse.success(req, res, dataUser, 200)\n   })\n   .catch(next)\n}\n\nasync function list(req:Request, res:Response, next:NextFunction){\n\n   const data :any = {\n       type:req.body.type,\n       token:req.headers.authorization\n   } \n        controller.list(data) \n       .then((respon) => {\n           ServerResponse.success(req, res, respon, 200)\n       })\n       .catch(next)\n}\n\nasync function update (req:Request, res:Response, next:NextFunction){\n   const data = {\n       token:req.headers.authorization,\n      }\n\ncontroller.update(Object.assign(data, req.body)) \n  .then((datasAlter)=>{\n    ServerResponse.success(req, res, datasAlter, 202)\n   })\n  \n  .catch(next)\n  \n}\nexport default router"]}
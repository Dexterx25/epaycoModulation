{"version":3,"file":"validator.js","sourceRoot":"","sources":["../../../../src/utils/actions/personas/validator.ts"],"names":[],"mappings":"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","sourcesContent":["export async function Validator (data:any) {\r\n    console.log('THIS IS DATA VALIDATOR--->', data)\r\n const {names, surnames, prefix_number, phone_number, password, date_birtday, password_verification, weight, height}  = data\r\n let full_name = `${names} ${surnames}`\r\n\r\n if(data.email){\r\n    const emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n    if(data.email.length > 300) return \"El correo no debe superar los 300 caracteres!\"\r\n    if(emailRegex.test(data.email) == false)return  \"El Correo no presenta un formato valido de correo\"\r\n }else{\r\n    return 'Es necesario suministrar un correo'\r\n }\r\n\r\n\r\n if(prefix_number){\r\n    function regexValidator(valor:any) {\r\n        console.log('vall-->', valor)\r\n        const patron =/[áéíóúñÑÄËÏÖÜÂÊÎÔÛáàèìòù]/;\r\n        const patron2 = /^[A-Z]+$/i\r\n         if (patron.test(valor) == true){\r\n             console.log('error Acents')\r\n             return 'No se aceptan acentos ni \"ñ\" en indicativo telefónico'\r\n         }else if(patron2.test(valor) == true){\r\n             console.log('Error Alphabetic')\r\n             return 'No se permiten letras del alfabeto, solo \"+\" o \"-\" seguido el numero indicativo'\r\n         }else{\r\n             return ''\r\n         }\r\n         }\r\n         for (let i = 0; i < prefix_number.length; i++) {\r\n             const character = prefix_number.charAt(i);\r\n          const regex =  await regexValidator(character)\r\n             if(regex){\r\n                 return regex\r\n             }\r\n         }\r\n    if(prefix_number !== '+57') return 'Por el momento es necesario que sea de indicatívo colombia'\r\n    if(prefix_number)return ''\r\n }else{\r\n    return 'Es necesario que haya número indicativo'\r\n }\r\n\r\n if(phone_number){\r\n    function regexValidator(valor:any) {\r\n        console.log('vall-->', valor)\r\n        const patron =/[áéíóúñÑÄËÏÖÜÂÊÎÔÛáàèìòù]/;\r\n        const patron2 = /^[A-Z_ | \\w+( \\w+)]+$/\r\n         if (patron.test(valor) == true){\r\n             console.log('error Acents')\r\n             return 'No se aceptan acentos ni \"ñ\" en númoero telefónico'\r\n         }else if(patron2.test(valor) == true){\r\n             console.log('Error Alphabetic')\r\n             return 'No se permiten letras del alfabeto'\r\n         }else{\r\n             return ''\r\n         }\r\n         }\r\n         for (let i = 0; i < phone_number.length; i++) {\r\n             const character = phone_number.charAt(i);\r\n          const regex =  await regexValidator(character)\r\n             if(regex){\r\n                 return regex\r\n             }\r\n         }\r\n         if(phone_number.length !== 10)return 'El número telefónico no puede ser mayor o menor a 19 dígitos';\r\n }else{\r\n     return 'Es necesario suministrar un número de teléfono'\r\n }\r\n\r\n if(height.length){\r\n     if(height.length > 4 || height.includes('-') || height.includes(','))return 'La estatura no es váida';\r\n }else{\r\n     return 'Es necesario suministrar la estatura';\r\n }\r\n\r\n if(weight){\r\n     if(weight.length > 3)return 'El peso soministrado no es válido'\r\n }else{\r\n     return 'Es necesario suministrar el peso';\r\n }\r\n\r\n if(password){\r\n    if(password.length < 8)return 'La contraseña debe ser mayor o igual a 8 caractéres';\r\n    if(password !== password_verification)return 'La cantraseña y la contraseña de verificación no son iguales, deben ser iguales';\r\n    function regexValidator(valor:any) {\r\n        console.log('vall-->', valor)\r\n        const patron =/[áéíóúñÑÄËÏÖÜÂÊÎÔÛáàèìòù]/;\r\n        const patron2 = /^[0-9]{4,}$/\r\n         if (patron.test(valor) == true){\r\n             console.log('error Acents')\r\n             return 'No se aceptan acentos ni \"ñ\" en contraseña'\r\n         }else if(patron2.test(valor) == true){\r\n             console.log('Error Alphabetic')\r\n             return 'No se permiten más de 4 digitos consecutivos'\r\n         }else{\r\n             return ''\r\n         }\r\n         }\r\n         for (let i = 0; i < password.length; i++) {\r\n             const character = password.charAt(i);\r\n          const regex =  await regexValidator(character)\r\n             if(regex){\r\n                 return regex\r\n             }\r\n         }\r\n         \r\n }else{\r\n     return 'Es necesario suministrar una contraseña'\r\n }\r\n\r\n if(names.length || surnames.length){\r\n   if(full_name){\r\n        if(names.length > 20) return 'Los nombres no pueden ocupar más de 20 caracteres';\r\n        if(surnames.length > 20) return 'Los apellidos no pueden ocupar más de 20 caracteres';\r\n        \r\n        function regexValidator(valor:any) {\r\n            console.log('vall-->', valor)\r\n            const patron =/[áéíóúñÑÄËÏÖÜÂÊÎÔÛáàèìòù]/;\r\n            const patron2 = /^[A-Z_ | \\w+( \\w+)]+$/\r\n             if (patron.test(valor) == true){\r\n                 console.log('error Acents')\r\n                 return 'No se aceptan acentos ni \"ñ\" en nombres ni apellidos'\r\n             }else if(patron2.test(valor) == false){\r\n                 console.log('Error Alphabetic')\r\n                 return 'Todas las letras deben ser del alfabeto'\r\n             }else{\r\n                 return ''\r\n             }\r\n             }\r\n             for (let i = 0; i < full_name.length; i++) {\r\n                 const character = full_name.charAt(i);\r\n              const regex =  await regexValidator(character)\r\n                 if(regex){\r\n                     return regex\r\n                 }\r\n             }\r\n\r\n     }else if(full_name.includes('ñ') || full_name.includes('Ñ')){\r\n\r\n        return 'El nombre completo no debe tener \"ñ\" '\r\n     }else{\r\n         return ''\r\n     }\r\n }else{\r\n     return 'El primer nombre y el primer y segundo apellido deben llenarse'\r\n }\r\n \r\n}"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/utils/postgres/index.ts"],"names":[],"mappings":"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","sourcesContent":["export const insertTionDatas = (data:any, type:string) => {\n       console.log('insertionDatas Model--->', data, type)\n    let $data: any = {}\n      for(var k in data){\n       if(data[k]){\n        $data[k] = data[k];\n        }\n       }\n    let $keys \n    let $values\n    switch (type) {\n         case 'email_register':\n         case 'facebook_register':\n         case 'ios_register':\n         case 'insert_auth_users':\n         $keys = Object.keys($data).toString().replace(\"[\", \"\").replace(\"]\", \"\");\n         $values = `${Object.values($data).map(e => `'${e}'`).toString()}`\n            console.log('values intoActions-->', $values)\n         return  {\n            keys:$keys,\n            values:$values \n          };\n             break;\n     \n         default:\n             break;\n     }\n}\nexport const queryDatas = (table:string, typequery:any, joins:any) =>{\n    console.log('queryAction!', table, typequery, joins)\nlet query :any = Object.keys(typequery)\nlet queryValues :any = Object.values(typequery)\nlet theJoinQuery :string = '';\nlet theQuery :string = ''\n        switch (table) {\n            case 'authentications':\n         if(joins){\n             theJoinQuery = `INNER JOIN ${joins[0]} ON ${table}.${query[0]} = ${joins[0]}.${query[0]}`;\n         }\n             theQuery = `WHERE ${table}.${query[0]} = '${queryValues[0]}'`\n             console.log('datasFilter--->', theJoinQuery,   'query-->', theQuery)\n         return{\n            theJoinQuery,\n            theQuery\n         } \n         break;\n        \n            default:\n                break;\n        }\n}\nexport const updateDatas = (data:any, type:string) =>{\n    console.log('Updata Mock', data, type)\n    let $data:any = {}\n    for(var k in data){\n        if(data[k]){\n                $data[k] = data[k];  \n         }\n        }\n    console.log('DATASSSS_-', $data)\n       let keysAndValuesToUpdate : any[] = []\n       let conditions : any[] =  []\n       switch (type) {\n           case 'user_update':\n           case  'update_user_forAdmin':\n               console.log('entr√≥ a update_user_forAdmin', data)\n            for (let i = 0; i < Object.keys($data).length; i++) {\n                const dataKeys :any = Object.keys($data)[i]\n                const dataValues :any = Object.values($data)[i]\n                keysAndValuesToUpdate.push(` ${dataKeys} = '${dataValues.toString()}'`)\n           }\n              console.log('Put OUT-->', keysAndValuesToUpdate, conditions)\n             conditions.push(` WHERE id = '${Object.values(data.id).toString()}'`) \n             console.log('coditions', conditions)\n               return{\n                keysAndValuesToUpdate:keysAndValuesToUpdate.toString().replace(\"[\", \"\").replace(\"]\", \"\"),\n                conditions:conditions.toString().replace(\"[\", \"\").replace(\"]\", \"\")\n               }\n               break;\n       \n           default:\n               break;\n       }\n\n}\nexport const getData = (querys:any, type:string) => {\n    let $data:any = {}\n    for(var k in querys){\n     if(querys[k] != null)\n        $data[k] = querys[k];\n     }\n     let theQuery:  any[] = []\n     switch (type) {\n         case 'getUser':\n             for (let i = 0; i < Object.keys($data).length; i++) {\n                 if(Object.keys($data).length <= 1){\n                     console.log('entra aqui-->')\n                     theQuery.push(`WHERE ${Object.keys($data)[i]} = '${Object.values($data)[i]}'`)\n                 }\n             }\n         return{\n            theQuery:theQuery.toString().replace(\"[\", \"\").replace(\"]\", \"\")\n            }    \n             \n         default:\n\n             break;\n     }\n\n}\n"]}
{"version":3,"file":"postgres.js","sourceRoot":"","sources":["../../src/store/postgres.ts"],"names":[],"mappings":"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","sourcesContent":["import {pool}  from \"./db\"\nconst chalk = require('chalk')\nrequire('dotenv').config()\nimport {insertTionDatas, queryDatas, updateDatas, getData} from \"../utils/postgres/index\"\nimport { ConsoleResponse } from \"../utils/responses/index\"\n\nlet procedence: any = '[STORE - POSTGRES]'\n\nexport function list(table:string) {\n    console.log('listing--->', table)\n    return new Promise( (resolve, reject) => {\n        pool.query(`SELECT * FROM ${table} `, (err:any, result:any) => {\n            if (err) return reject(err);\n            console.log('resut--->', result.rows)\n            resolve(result.rows);\n        })\n    })\n}\n\nexport function get({type, querys}:any,table:string) {\n    return new Promise(async(resolve, reject) => {\n        const {theQuery} :any = await getData(querys, type)\n        console.log('TheQuery--->', theQuery, 'tableee--->', table)\n        pool.query(`SELECT * FROM ${table} ${theQuery}`, (err:any, result:any) => {\n            if(err){\n                console.log('error Get--->',err.stack)\n                reject(err)\n              }else{\n                resolve(result.rows[0]);\n             }\n        })\n    })\n}\n\nexport async function insert(table:string, {data, type}:any) {\n    console.warn('datas to insert --->', data, type, table)\n     return new Promise(async(resolve, reject) => {\n          const {keys, values} :any = await insertTionDatas(data, type)\n          console.log('keys-->', keys, 'values--->', values)\n         pool.query(`INSERT INTO ${table}(${keys}) values(${values}) RETURNING *`, (err:any, result:any) => {\n            if (err) {\n                reject(Object.assign(err, {procedence}))\n              } else {\n                console.log(chalk.redBright(`succefull ${type}!`),result.rows[0],'<----hasta aqui')\n                resolve(result.rows[0]);\n              }\n         })\n     })\n}\n\nexport function update(table:string, {data, type}:any) {\n    console.log('Updataaaa IN FUNCTION UPDATE-->', table, data, type)\n    return new Promise(async(resolve, reject) => {\n        const {keysAndValuesToUpdate, conditions} :any = await updateDatas(data, type)\n      console.log('Update Key after--->', keysAndValuesToUpdate, conditions)\n        pool.query(`UPDATE ${table} SET ${keysAndValuesToUpdate} ${conditions} RETURNING *`, (err:any, result:any) => {\n            if(err){\n                console.log('error Update--->',err.stack)\n                reject(err)\n              }else{\n                console.log(chalk.redBright(`succefull ${type}!`),result.rows[0])\n                resolve(result.rows[0]);\n             }\n        })\n    })\n}\n\nexport function upsert(table:string, {data, type}:any) {\n    console.warn('datas upsert--->', data.names)\n    if (data && data.id) {\n        console.log('Vamo Update', table, data)\n        return update(table, {data, type});\n    } else {\n        console.log('Vamo Insert-->',table, data)\n        return insert(table, {data, type});\n    }\n}\n\nexport async function query(table:string, typequery:any, joins:any) {\n    console.log(chalk.redBright('comming to query--->'), table, typequery, joins)\n      let joinQuery = '';\n      let query = ''\n       if (joins.length) {\n            console.log('One Query')\n        const {theJoinQuery, theQuery} :any = await queryDatas(table, typequery, joins)\n        joinQuery = theJoinQuery\n        query = theQuery\n      }else{\n          console.log('multiple query')\n        const {theQuery} :any = await queryDatas(table, typequery, null)\n        query = theQuery\n      }\n    return new Promise((resolve, reject) => {\n        pool.query(`SELECT * FROM ${table} ${joinQuery}  ${query}`, (err:any, res:any) => {\n            if (err) return reject(err);\n            console.log('RESPONSE QUERY DATABASE', res.rows[0])\n            resolve(res.rows[0]);\n        })\n    })\n}\n\n"]}
{"version":3,"file":"remote.js","sourceRoot":"","sources":["../../src/store/remote.ts"],"names":[],"mappings":";;;;;AAAA,sDAA6B;AAC7B,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAA;AAC1B,SAAwB,cAAc,CAAC,IAAQ,EAAE,IAAQ;IACrD,MAAM,GAAG,GAAG,SAAS,GAAE,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;IAEzC,SAAS,IAAI,CAAC,KAAS;QACnB,OAAO,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAEJ,SAAS,GAAG,CAAC,KAAY,EAAE,EAAM;QAChC,OAAO,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED,SAAS,MAAM,CAAC,KAAY,EAAE,IAAQ;QACrC,OAAO,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,SAAS,MAAM,CAAC,KAAY,EAAE,IAAQ;QACrC,OAAO,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,SAAS,MAAM,CAAC,KAAY,EAAE,IAAQ;QACrC,IAAI,IAAI,CAAC,EAAE,EAAE;YACZ,OAAO,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAC3B;QAED,OAAO,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,SAAS,KAAK,CAAC,KAAY,EAAE,KAAS,EAAE,IAAQ;QAC/C,OAAO,GAAG,CAAC,MAAM,EAAE,KAAK,GAAG,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACvD,CAAC;IAEE,SAAS,GAAG,CAAC,MAAU,EAAE,KAAY,EAAE,IAAS;QAC5C,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC;QAC7B,IAAI,IAAI,GAAG,EAAE,CAAC;QAEb,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,EAAE;YACnC,GAAG,IAAI,GAAG,GAAE,IAAI,CAAC;SACjB;aAAM,IAAI,IAAI,EAAE;YAChB,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SAC5B;QAEK,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,iBAAO,CAAC;gBACJ,MAAM;gBACN,OAAO,EAAE;oBACL,cAAc,EAAE,kBAAkB;iBACrC;gBACD,GAAG;gBACH,IAAI;aACP,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;gBAClB,IAAI,GAAG,EAAE;oBACL,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,GAAG,CAAC,CAAC;oBACxD,OAAO,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBAC9B;gBAED,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC9B,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IAED,OAAO;QACH,IAAI;KACP,CAAA;AACL,CAAC;AAhED,iCAgEC","sourcesContent":["import request from 'request'\nrequire('dotenv').config()\nexport default function createRemoteDB(host:any, port:any) {\n    const URL = 'http://'+ host + ':' + port;\n\n    function list(table:any) {\n        return req('GET', table);\n    }\n\n\tfunction get(table:string, id:any) {\n\t\treturn req('GET', table, id);\n\t}\n\n\tfunction insert(table:string, data:any) {\n\t\treturn req('POST', table, data);\n\t}\n\n\tfunction update(table:string, data:any) {\n\t\treturn req('PUT', table, data);\n\t}\n\n\tfunction upsert(table:string, data:any) {\n\t\tif (data.id) {\n\t\t\treturn update(table, data);\n\t\t}\n\n\t\treturn insert(table, data);\n\t}\n\n\tfunction query(table:string, query:any, join:any) {\n\t\treturn req('POST', table + '/query', { query, join });\n\t}\n\n    function req(method:any, table:string, data?:any) {\n        let url = URL + '/' + table;\n       let body = '';\n\n        if (method === 'GET' && data) {\n\t\t\turl += '/'+ data;\n\t\t} else if (data) {\n\t\t\tbody = JSON.stringify(data);\n\t\t}\n\n        return new Promise((resolve, reject) => {\n            request({\n                method,\n                headers: {\n                    'content-type': 'application/json'\n                },\n                url,\n                body,\n            }, (err, req, body) => {\n                if (err) {\n                    console.error('Error con la base de datos remota', err);\n                    return reject(err.message);\n                }\n\n                const resp = JSON.parse(body);\n                return resolve(resp.body);\n            })\n        })\n    }\n\n    return {\n        list,\n    }\n}\n\n"]}
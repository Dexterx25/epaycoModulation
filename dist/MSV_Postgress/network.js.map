{"version":3,"file":"network.js","sourceRoot":"","sources":["../../src/MSV_Postgress/network.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAiE;AACjE,yDAA0C;AAC1C,oDAAwE;AACxE,MAAM,MAAM,GAAW,gBAAM,EAAE,CAAA;AAE/B,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5B,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;AAC/B,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC/B,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAE9B,SAAe,IAAI,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;;QAC/D,MAAM,KAAK,GAAS,MAAM,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;QACtD,sBAAc,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC;CAAA;AAED,SAAe,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;;QAC9D,MAAM,KAAK,GAAS,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QACpE,sBAAc,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC;CAAA;AAED,SAAe,MAAM,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;;QACjE,MAAM,KAAK,GAAS,MAAM,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,CAAA;QAClE,sBAAc,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC;CAAA;AAED,SAAe,MAAM,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;;QACjE,MAAM,KAAK,GAAS,MAAM,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,CAAA;QAClE,sBAAc,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC;CAAA;AAED,kBAAe,MAAM,CAAA","sourcesContent":["import { Router, Request, Response, NextFunction} from \"express\";\nimport * as Store from '../store/postgres'\nimport {ServerResponse, ConsoleResponse} from '../utils/responses/index'\nconst router: Router = Router()\n\nrouter.get('/:table', list);\nrouter.get('/:table/:id', get);\nrouter.post('/:table', insert);\nrouter.put('/:table', upsert);\n\nasync function list(req: Request, res: Response, next: NextFunction) {\n    const datos : any = await Store.list(req.params.table)\n    ServerResponse.success(req, res, datos, 200);\n}\n\nasync function get(req: Request, res: Response, next: NextFunction) {\n    const datos : any = await Store.get(req.params.table, req.params.id)\n    ServerResponse.success(req, res, datos, 200);\n}\n\nasync function insert(req: Request, res: Response, next: NextFunction) {\n    const datos : any = await Store.insert(req.params.table, req.body)\n    ServerResponse.success(req, res, datos, 200);\n}\n\nasync function upsert(req: Request, res: Response, next: NextFunction) {\n    const datos : any = await Store.upsert(req.params.table, req.body)\n    ServerResponse.success(req, res, datos, 200);\n}\n\nexport default router"]}
{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../../src/api/components/auth/controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,oDAA2B;AAC3B,oEAAqD;AACrD,kDAAyB;AAEzB,mBAAyB,aAAiB;IAC1C,IAAI,KAAK,GAAG,aAAa,CAAA;IAEzB,IAAG,CAAC,KAAK,EAAC;QACN,KAAK,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAA;KAC1C;IACD,IAAI,MAAM,GAAG,iBAAiB,CAAA;IAC9B,IAAI,UAAU,GAAG,mBAAmB,CAAA;IAEpC,MAAM,MAAM,GAAG,CAAC,KAAY,EAAE,QAAe,EAAE,IAAS,EAAE,EAAE;QAC1D,OAAO,IAAI,OAAO,CAAE,CAAM,OAAO,EAAE,MAAM,EAAC,EAAE;YAC1C,MAAM,IAAI,GAAQ,MAAM,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,EAAC,KAAK,EAAC,KAAK,EAAC,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;YAE7E,MAAM,QAAQ,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAA;YACnE,IAAG,QAAQ,IAAI,IAAI,EAAC;gBACd,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACnC,MAAM,EAAC,EAAE,EAAE,kBAAkB,KAAkB,IAAI,EAAjB,SAAS,UAAI,IAAI,EAA7C,4BAAsC,CAAO,CAAA;gBACnD,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAC,KAAK,EAAC,EAAE,SAAS,CAAC,CAAA;gBAClD,OAAO,CAAC,GAAG,CAAC,GAAG,UAAU,6BAA6B,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;gBACrE,OAAO,CAAC,UAAU,CAAC,CAAA;aACrB;iBAAI;gBACD,MAAM,CAAC,EAAC,GAAG,EAAC,kBAAkB,EAAC,CAAC,CAAA;aAClC;QACX,CAAC,CAAA,CAAC,CAAA;IACJ,CAAC,CAAA;IACD,WAAW;IACX,MAAM,MAAM,GAAG,CAAM,MAAU,EAAE,IAAQ,EAAE,IAAW,EAAE,EAAE;QACtD,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAA;QACvC,IAAI,QAAQ,GAAS,EAAE,CAAA;QAEzB,IAAG,IAAI,IAAI,QAAQ,EAAC;YAChB,QAAQ,GAAG;gBACT,IAAI,EAAC;oBACH,QAAQ,EAAC,MAAM,CAAC,EAAE;oBAClB,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;oBAC3C,KAAK,EAAC,IAAI,CAAC,KAAK;iBACjB;gBACD,IAAI,EAAC,oBAAoB;aAC3B,CAAA;SACD;aAAK,IAAG,IAAI,GAAG,OAAO,EAAC;YACtB,QAAQ,GAAG;gBACT,IAAI,EAAC;oBACH,OAAO,EAAC,MAAM,CAAC,EAAE;oBACjB,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;oBAC3C,KAAK,EAAC,IAAI,CAAC,KAAK;iBACjB;gBACD,IAAI,EAAC,mBAAmB;aAC1B,CAAA;SACD;QAEC,OAAO,CAAC,GAAG,CAAC,GAAG,UAAU,sCAAsC,eAAK,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QACxF,OAAQ,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;IAC5C,CAAC,CAAA,CAAA;IAED,OAAO;QACL,MAAM;QACN,MAAM;KACP,CAAA;AAED,CAAC;AA3DD,4BA2DC","sourcesContent":["import {nanoid} from 'nanoid'\nimport bcrypt from 'bcrypt'\nimport * as auth from '../../../authorizations/index'\nimport chalk from 'chalk'\n\nexport default function (injectedStore:any){\nlet store = injectedStore\n\nif(!store){\n    store = require('../../../store/store')\n}\nlet table2 = 'authentications'\nlet procedence = '[CONTROLLER AUTH]'\n\nconst insert = (email:string, password:string, type?:any) =>{\n  return new Promise( async(resolve, reject)=>{\n    const data :any = await store.query(table2, {email:email}, new Array(type))\n\n  const areEqual = await bcrypt.compare(password, data.encrypted_password)\n       if(areEqual == true){\n             const token = await auth.sign(data)\n             const {id, encrypted_password, ...newObject} = data\n             const dataReturn = Object.assign({token}, newObject)\n               console.log(`${procedence} ====> insertLogin XDDDD - `, data, token)\n              resolve(dataReturn)\n           }else{\n               reject({msg:'Invalid Password'})\n            }\n  })\n}\n//user auth\nconst upsert = async(respon:any, data:any, type:string) =>{\n    console.log('DATAS UPSERT ---->', data)\n    let authData : any = ''\n    \n  if(type == 'admins'){\n      authData = {\n        data:{\n          admin_id:respon.id,\n          encrypted_password: data.encrypted_password, \n          email:data.email\n        },     \n        type:'insert_auth_admins'\n     }\n    }else if(type = 'users'){\n      authData = {\n        data:{\n          user_id:respon.id,\n          encrypted_password: data.encrypted_password, \n          email:data.email\n        },     \n        type:'insert_auth_users'\n     }  \n    }\n   \n      console.log(`${procedence} ====> upsertAuth authData body -> ${chalk.blueBright(data)}`)\n      return  store.upsert(table2, authData)\n}\n\nreturn {\n  insert,\n  upsert\n}\n\n}"]}
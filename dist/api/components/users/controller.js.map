{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../../src/api/components/users/controller.ts"],"names":[],"mappings":"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","sourcesContent":["import bcrypt from \"bcrypt\"\nimport  controllerAuth from \"../auth/index\"\nimport {midlleHandleError, Validator, ConvertingsId_type} from \"../../../utils/actions/personas/index\"\nimport * as auth from \"../../../authorizations/index\"\nimport  userModel from \"./model\"\n\nexport default function (injectedStore:any, injectedCache:any) {\n    let cache = injectedCache\n    let store = injectedStore\n\n    if(!store ){\n          store = require('../../../store/dummy')\n    }\n    if(!cache ){\n        cache = require('../../../store/dummy')\n    }\n  let table = 'users'\n\nasync function insert ({datas, type}:any) {\nreturn new Promise(async(resolve, reject)=>{   \n\nconst responValidator = await Validator(datas) \n   if(responValidator){\n          reject({msg:responValidator});\n          return false;\n    }\n  let data = new userModel(datas)\ntry{\nconst registerRespon: any = await store.upsert(table, {data, type})\n\nconst responAuth = await controllerAuth.upsert(registerRespon,{\n   encrypted_password:await bcrypt.hash(datas.password, 5),\n   id:registerRespon.id,\n   email:registerRespon.email \n   },'users')\n  \nconst {email} = Object.assign(registerRespon, responAuth)\nconst res =  await controllerAuth.insert(email, datas.password, table)  \nconsole.log('RES CONTROLLER AUTH---', res)\n  resolve(res)\n }catch(e) {\n   await midlleHandleError(e, table, datas, resolve, reject)\n}\n\n})\n\n}\n\nasync function list(data:any){ \n return new Promise(async(resolve, reject) =>{\nlet users  = await cache.list(table)\n   if(!users){\n       users = await store.list(table)\n         cache.upsert(users, table)\n   }else{\n      console.log('datos traidos de la cache')\n   }         \n   resolve(users)\n })\n}\n\nasync function get(data:any){\n  return new Promise( async (resolve, reject)=>{\n    const returnloged = auth.cheak.logged(data)\n    if(returnloged.error){\n     reject({msg:'Error de permisos de seguridad, token inválido', statusCode:401});\n     return false;\n    }\n        const {filter} = data\n        const theData = {type:'getUser', querys:filter}\n\n        console.log('the filter--->', filter)\n\n        let user :any = await cache.get(filter.id, table)\n          if(!user){\n              console.log('no estaba en cachee, buscando en db')\n              user = await store.get(theData, table)\n              \n              cache.upsert(user, table)\n          }\n       resolve(user)\n  })\n\n}\n\nasync function update(theBody:any){\n\nreturn new Promise (async(resolve, reject) =>{\n\n const returnloged = auth.cheak.logged(theBody)\n   if(returnloged.error){\n    reject({msg:'Error de permisos de seguridad, token inválido', statusCode:401});\n    return false;\n   }\n   \n  const responValidator = await Validator(theBody)\n    if(responValidator){\n       reject({msg:responValidator});\n       return false;\n    }\n\n    let data = new userModel(theBody)\n\n  try {\n    const filter = theBody;\n    const theData = {type:'getUser', querys:filter}\n    const filterUser = await store.get(theData, table)\n\n    const dataRespon =  await  store.upsert(table, Object.assign(data, {id:filterUser, type:theBody.type}))\n    resolve(dataRespon)\n  } catch (error) {\n    midlleHandleError(error, table, data, resolve, reject)\n  }\n \n })\n}\n\nreturn {\n  insert,\n  list,\n  get,\n  update\n}\n\n}"]}